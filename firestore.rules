rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Function to check if the user is an admin
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users collection: Modified to handle both UID and student number based documents
    match /users/{userId} {
      // Allow read if:
      // 1. User is reading their own document (by UID or student number)
      // 2. User is an admin
      allow read: if request.auth != null && (
        request.auth.uid == userId || 
        request.auth.uid == resource.data.uid ||
        isAdmin()
      );

      // Allow write if:
      // 1. User is updating their own document (by UID or student number)
      // 2. User is an admin
      allow write: if request.auth != null && (
        request.auth.uid == userId ||
        request.auth.uid == resource.data.uid ||
        isAdmin()
      );

      // Allow create if:
      // 1. User is an admin
      // 2. The document contains required fields
      allow create: if request.auth != null && 
        isAdmin() &&
        request.resource.data.keys().hasAll(['name', 'email', 'student_number', 'role', 'uid']);
    }
    
    // Document Requests collection (unchanged)
    match /document_requests/{requestId} {
      allow create: if request.auth != null;

      allow read, update, delete: if request.auth != null && 
                                  request.auth.uid == resource.data.userId;
      
      allow read, update, delete: if isAdmin();
    }
  }
}
